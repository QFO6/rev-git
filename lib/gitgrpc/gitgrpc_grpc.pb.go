// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gitgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GitServiceClient is the client API for GitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitServiceClient interface {
	SaveToGit(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ReadFileHistory(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ReadCommitContent(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type gitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGitServiceClient(cc grpc.ClientConnInterface) GitServiceClient {
	return &gitServiceClient{cc}
}

func (c *gitServiceClient) SaveToGit(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/gitgrpc.GitService/SaveToGit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) ReadFileHistory(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/gitgrpc.GitService/ReadFileHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) ReadCommitContent(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/gitgrpc.GitService/ReadCommitContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitServiceServer is the server API for GitService service.
// All implementations must embed UnimplementedGitServiceServer
// for forward compatibility
type GitServiceServer interface {
	SaveToGit(context.Context, *Request) (*Response, error)
	ReadFileHistory(context.Context, *Request) (*Response, error)
	ReadCommitContent(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedGitServiceServer()
}

// UnimplementedGitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGitServiceServer struct {
}

func (UnimplementedGitServiceServer) SaveToGit(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveToGit not implemented")
}
func (UnimplementedGitServiceServer) ReadFileHistory(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFileHistory not implemented")
}
func (UnimplementedGitServiceServer) ReadCommitContent(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCommitContent not implemented")
}
func (UnimplementedGitServiceServer) mustEmbedUnimplementedGitServiceServer() {}

// UnsafeGitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitServiceServer will
// result in compilation errors.
type UnsafeGitServiceServer interface {
	mustEmbedUnimplementedGitServiceServer()
}

func RegisterGitServiceServer(s grpc.ServiceRegistrar, srv GitServiceServer) {
	s.RegisterService(&GitService_ServiceDesc, srv)
}

func _GitService_SaveToGit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).SaveToGit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitgrpc.GitService/SaveToGit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).SaveToGit(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_ReadFileHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).ReadFileHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitgrpc.GitService/ReadFileHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).ReadFileHistory(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_ReadCommitContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).ReadCommitContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitgrpc.GitService/ReadCommitContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).ReadCommitContent(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GitService_ServiceDesc is the grpc.ServiceDesc for GitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitgrpc.GitService",
	HandlerType: (*GitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveToGit",
			Handler:    _GitService_SaveToGit_Handler,
		},
		{
			MethodName: "ReadFileHistory",
			Handler:    _GitService_ReadFileHistory_Handler,
		},
		{
			MethodName: "ReadCommitContent",
			Handler:    _GitService_ReadCommitContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/gitgrpc.proto",
}
